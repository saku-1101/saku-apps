diff --git a/node_modules/remark-link-card/index.js b/node_modules/remark-link-card/index.js
index 5de58d6..2b86606 100644
--- a/node_modules/remark-link-card/index.js
+++ b/node_modules/remark-link-card/index.js
@@ -1,18 +1,18 @@
-const visit = require('unist-util-visit');
-const ogs = require('open-graph-scraper');
-const path = require('path');
-const { writeFile, access, mkdir } = require('fs').promises;
-const fetch = require('node-fetch');
-const sanitize = require('sanitize-filename');
-const he = require('he');
+const visit = require("unist-util-visit");
+const ogs = require("open-graph-scraper");
+const path = require("path");
+const { writeFile, access, mkdir } = require("fs").promises;
+const fetch = require("node-fetch");
+const sanitize = require("sanitize-filename");
+const he = require("he");
 
-const defaultSaveDirectory = 'public';
-const defaultOutputDirectory = '/remark-link-card/';
+const defaultSaveDirectory = "public";
+const defaultOutputDirectory = "/remark-link-card/";
 
 const rlc = (options) => {
   return async (tree) => {
-    transformers = [];
-    visit(tree, 'paragraph', (paragraphNode, index) => {
+    const transformers = [];
+    visit(tree, "paragraph", (paragraphNode, index) => {
       if (paragraphNode.children.length !== 1) {
         return tree;
       }
@@ -22,9 +22,9 @@ const rlc = (options) => {
         return tree;
       }
 
-      visit(paragraphNode, 'text', (textNode) => {
+      visit(paragraphNode, "text", (textNode) => {
         const urls = textNode.value.match(
-          /(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/g
+          /(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/g,
         );
         if (urls && urls.length === 1) {
           transformers.push(async () => {
@@ -34,7 +34,7 @@ const rlc = (options) => {
             // create linkCardNode
             const linkCardHtml = createLinkCard(data);
             const linkCardNode = {
-              type: 'html',
+              type: "html",
               value: linkCardHtml,
             };
 
@@ -61,7 +61,7 @@ const getOpenGraph = async (targetUrl) => {
     return result;
   } catch (error) {
     console.error(
-      `[remark-link-card] Error: Failed to get the Open Graph data of ${error.result.requestUrl} due to ${error.result.error}.`
+      `[remark-link-card] Error: Failed to get the Open Graph data of ${error.result.requestUrl} due to ${error.result.error}.`,
     );
     return undefined;
   }
@@ -78,14 +78,14 @@ const fetchData = async (targetUrl, options) => {
   // set description
   const description =
     (ogResult && ogResult.ogDescription && he.encode(ogResult.ogDescription)) ||
-    '';
+    "";
   // set favicon src
   const faviconUrl = `https://www.google.com/s2/favicons?domain=${parsedUrl.hostname}`;
-  let faviconSrc = '';
+  let faviconSrc = "";
   if (options && options.cache) {
     faviconFilename = await downloadImage(
       faviconUrl,
-      path.join(process.cwd(), defaultSaveDirectory, defaultOutputDirectory)
+      path.join(process.cwd(), defaultSaveDirectory, defaultOutputDirectory),
     );
     faviconSrc =
       faviconFilename && path.join(defaultOutputDirectory, faviconFilename);
@@ -93,12 +93,12 @@ const fetchData = async (targetUrl, options) => {
     faviconSrc = faviconUrl;
   }
   // set open graph image src
-  let ogImageSrc = '';
+  let ogImageSrc = "";
   if (ogResult && ogResult.ogImage && ogResult.ogImage.url) {
     if (options && options.cache) {
       const imageFilename = await downloadImage(
         ogResult.ogImage.url,
-        path.join(process.cwd(), defaultSaveDirectory, defaultOutputDirectory)
+        path.join(process.cwd(), defaultSaveDirectory, defaultOutputDirectory),
       );
       ogImageSrc =
         imageFilename && path.join(defaultOutputDirectory, imageFilename);
@@ -123,7 +123,7 @@ const fetchData = async (targetUrl, options) => {
     displayUrl = decodeURI(displayUrl);
   } catch (error) {
     console.error(
-      `[remark-link-card] Error: Cannot decode url: "${url}"\n ${error}`
+      `[remark-link-card] Error: Cannot decode url: "${url}"\n ${error}`,
     );
   }
 
@@ -142,19 +142,19 @@ const createLinkCard = (data) => {
   // create favicon element
   const faviconElement = data.faviconSrc
     ? `<img class="rlc-favicon" src="${data.faviconSrc}" alt="${data.title} favicon" width="16" height="16">`.trim()
-    : '';
+    : "";
 
   // create description element
   const descriptionElement = data.description
     ? `<div class="rlc-description">${data.description}</div>`
-    : '';
+    : "";
 
   // create image element
   const imageElement = data.ogImageSrc
     ? `<div class="rlc-image-container">
       <img class="rlc-image" src="${data.ogImageSrc}" alt="${data.ogImageAlt}" />
     </div>`.trim()
-    : '';
+    : "";
 
   // create output HTML
   const outputHTML = `
@@ -180,7 +180,7 @@ const downloadImage = async (url, saveDirectory) => {
     targetUrl = new URL(url);
   } catch (error) {
     console.error(
-      `[remark-link-card] Error: Failed to parse url "${url}"\n ${error}`
+      `[remark-link-card] Error: Failed to parse url "${url}"\n ${error}`,
     );
   }
   const filename = sanitize(decodeURI(targetUrl.href));
@@ -202,8 +202,8 @@ const downloadImage = async (url, saveDirectory) => {
   try {
     const response = await fetch(targetUrl.href, {
       header: {
-        'User-Agent':
-          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',
+        "User-Agent":
+          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36",
       },
       timeout: 10000,
     });
@@ -211,7 +211,7 @@ const downloadImage = async (url, saveDirectory) => {
     writeFile(saveFilePath, buffer);
   } catch (error) {
     console.error(
-      `[remark-link-card] Error: Failed to download image from ${targetUrl.href}\n ${error}`
+      `[remark-link-card] Error: Failed to download image from ${targetUrl.href}\n ${error}`,
     );
     return undefined;
   }
