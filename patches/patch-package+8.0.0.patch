diff --git a/node_modules/patch-package/dist/makePatch.js b/node_modules/patch-package/dist/makePatch.js
index d8d0925..5a9e822 100644
--- a/node_modules/patch-package/dist/makePatch.js
+++ b/node_modules/patch-package/dist/makePatch.js
@@ -1,7 +1,9 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
+var __importDefault =
+  (this && this.__importDefault) ||
+  function (mod) {
+    return mod && mod.__esModule ? mod : { default: mod };
+  };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.logPatchSequenceError = exports.makePatch = void 0;
 const chalk_1 = __importDefault(require("chalk"));
@@ -25,216 +27,309 @@ const resolveRelativeFileDependencies_1 = require("./resolveRelativeFileDependen
 const spawnSafe_1 = require("./spawnSafe");
 const stateFile_1 = require("./stateFile");
 function printNoPackageFoundError(packageName, packageJsonPath) {
-    console_1.default.log(`No such package ${packageName}
+  console_1.default.log(`No such package ${packageName}
 
   File not found: ${packageJsonPath}`);
 }
-function makePatch({ packagePathSpecifier, appPath, packageManager, includePaths, excludePaths, patchDir, createIssue, mode, }) {
-    var _a, _b, _c, _d, _e;
-    const packageDetails = PackageDetails_1.getPatchDetailsFromCliString(packagePathSpecifier);
-    if (!packageDetails) {
-        console_1.default.log("No such package", packagePathSpecifier);
-        return;
-    }
-    const state = stateFile_1.getPatchApplicationState(packageDetails);
-    const isRebasing = (_a = state === null || state === void 0 ? void 0 : state.isRebasing) !== null && _a !== void 0 ? _a : false;
-    // If we are rebasing and no patches have been applied, --append is the only valid option because
-    // there are no previous patches to overwrite/update
-    if (isRebasing &&
-        (state === null || state === void 0 ? void 0 : state.patches.filter((p) => p.didApply).length) === 0 &&
-        mode.type === "overwrite_last") {
-        mode = { type: "append", name: "initial" };
-    }
-    if (isRebasing && state) {
-        stateFile_1.verifyAppliedPatches({ appPath, patchDir, state });
-    }
-    if (mode.type === "overwrite_last" &&
-        isRebasing &&
-        (state === null || state === void 0 ? void 0 : state.patches.length) === 0) {
-        mode = { type: "append", name: "initial" };
-    }
-    const existingPatches = patchFs_1.getGroupedPatches(patchDir).pathSpecifierToPatchFiles[packageDetails.pathSpecifier] || [];
-    // apply all existing patches if appending
-    // otherwise apply all but the last
-    const previouslyAppliedPatches = state === null || state === void 0 ? void 0 : state.patches.filter((p) => p.didApply);
-    const patchesToApplyBeforeDiffing = isRebasing
-        ? mode.type === "append"
-            ? existingPatches.slice(0, previouslyAppliedPatches.length)
-            : state.patches[state.patches.length - 1].didApply
-                ? existingPatches.slice(0, previouslyAppliedPatches.length - 1)
-                : existingPatches.slice(0, previouslyAppliedPatches.length)
-        : mode.type === "append"
-            ? existingPatches
-            : existingPatches.slice(0, -1);
-    if (createIssue && mode.type === "append") {
-        console_1.default.log("--create-issue is not compatible with --append.");
-        process.exit(1);
+function makePatch({
+  packagePathSpecifier,
+  appPath,
+  packageManager,
+  includePaths,
+  excludePaths,
+  patchDir,
+  createIssue,
+  mode,
+}) {
+  var _a, _b, _c, _d, _e;
+  const packageDetails =
+    PackageDetails_1.getPatchDetailsFromCliString(packagePathSpecifier);
+  if (!packageDetails) {
+    console_1.default.log("No such package", packagePathSpecifier);
+    return;
+  }
+  const state = stateFile_1.getPatchApplicationState(packageDetails);
+  const isRebasing =
+    (_a = state === null || state === void 0 ? void 0 : state.isRebasing) !==
+      null && _a !== void 0
+      ? _a
+      : false;
+  // If we are rebasing and no patches have been applied, --append is the only valid option because
+  // there are no previous patches to overwrite/update
+  if (
+    isRebasing &&
+    (state === null || state === void 0
+      ? void 0
+      : state.patches.filter((p) => p.didApply).length) === 0 &&
+    mode.type === "overwrite_last"
+  ) {
+    mode = { type: "append", name: "initial" };
+  }
+  if (isRebasing && state) {
+    stateFile_1.verifyAppliedPatches({ appPath, patchDir, state });
+  }
+  if (
+    mode.type === "overwrite_last" &&
+    isRebasing &&
+    (state === null || state === void 0 ? void 0 : state.patches.length) === 0
+  ) {
+    mode = { type: "append", name: "initial" };
+  }
+  const existingPatches =
+    patchFs_1.getGroupedPatches(patchDir).pathSpecifierToPatchFiles[
+      packageDetails.pathSpecifier
+    ] || [];
+  // apply all existing patches if appending
+  // otherwise apply all but the last
+  const previouslyAppliedPatches =
+    state === null || state === void 0
+      ? void 0
+      : state.patches.filter((p) => p.didApply);
+  const patchesToApplyBeforeDiffing = isRebasing
+    ? mode.type === "append"
+      ? existingPatches.slice(0, previouslyAppliedPatches.length)
+      : state.patches[state.patches.length - 1].didApply
+        ? existingPatches.slice(0, previouslyAppliedPatches.length - 1)
+        : existingPatches.slice(0, previouslyAppliedPatches.length)
+    : mode.type === "append"
+      ? existingPatches
+      : existingPatches.slice(0, -1);
+  if (createIssue && mode.type === "append") {
+    console_1.default.log("--create-issue is not compatible with --append.");
+    process.exit(1);
+  }
+  if (createIssue && isRebasing) {
+    console_1.default.log("--create-issue is not compatible with rebasing.");
+    process.exit(1);
+  }
+  const numPatchesAfterCreate =
+    mode.type === "append" || existingPatches.length === 0
+      ? existingPatches.length + 1
+      : existingPatches.length;
+  const vcs = createIssue_1.getPackageVCSDetails(packageDetails);
+  const canCreateIssue =
+    !isRebasing &&
+    createIssue_1.shouldRecommendIssue(vcs) &&
+    numPatchesAfterCreate === 1 &&
+    mode.type !== "append";
+  const appPackageJson = require(path_1.join(appPath, "package.json"));
+  const packagePath = path_1.join(appPath, packageDetails.path);
+  const packageJsonPath = path_1.join(packagePath, "package.json");
+  if (!fs_extra_1.existsSync(packageJsonPath)) {
+    printNoPackageFoundError(packagePathSpecifier, packageJsonPath);
+    process.exit(1);
+  }
+  const tmpRepo = tmp_1.dirSync({ unsafeCleanup: true });
+  const tmpRepoPackagePath = path_1.join(tmpRepo.name, packageDetails.path);
+  const tmpRepoNpmRoot = tmpRepoPackagePath.slice(
+    0,
+    -`/node_modules/${packageDetails.name}`.length,
+  );
+  const tmpRepoPackageJsonPath = path_1.join(tmpRepoNpmRoot, "package.json");
+  try {
+    const patchesDir = path_1.resolve(path_1.join(appPath, patchDir));
+    console_1.default.info(
+      chalk_1.default.grey("•"),
+      "Creating temporary folder",
+    );
+    // make a blank package.json
+    fs_extra_1.mkdirpSync(tmpRepoNpmRoot);
+    fs_extra_1.writeFileSync(
+      tmpRepoPackageJsonPath,
+      JSON.stringify({
+        dependencies: {
+          [packageDetails.name]: getPackageResolution_1.getPackageResolution({
+            packageDetails,
+            packageManager,
+            appPath,
+          }),
+        },
+        resolutions:
+          resolveRelativeFileDependencies_1.resolveRelativeFileDependencies(
+            appPath,
+            appPackageJson.resolutions || {},
+          ),
+      }),
+    );
+    const packageVersion = getPackageVersion_1.getPackageVersion(
+      path_1.join(path_1.resolve(packageDetails.path), "package.json"),
+    );
+    [".npmrc", ".yarnrc", ".yarn"].forEach((rcFile) => {
+      const rcPath = path_1.join(appPath, rcFile);
+      if (fs_extra_1.existsSync(rcPath)) {
+        fs_extra_1.copySync(rcPath, path_1.join(tmpRepo.name, rcFile), {
+          dereference: true,
+        });
+      }
+    });
+    if (packageManager === "yarn") {
+      console_1.default.info(
+        chalk_1.default.grey("•"),
+        `Installing ${packageDetails.name}@${packageVersion} with yarn`,
+      );
+      try {
+        // try first without ignoring scripts in case they are required
+        // this works in 99.99% of cases
+        spawnSafe_1.spawnSafeSync(`bun`, ["install"], {
+          cwd: tmpRepoNpmRoot,
+          logStdErrOnError: false,
+        });
+      } catch (e) {
+        // try again while ignoring scripts in case the script depends on
+        // an implicit context which we haven't reproduced
+        spawnSafe_1.spawnSafeSync(`bun`, ["install", "--ignore-scripts"], {
+          cwd: tmpRepoNpmRoot,
+        });
+      }
+    } else {
+      console_1.default.info(
+        chalk_1.default.grey("•"),
+        `Installing ${packageDetails.name}@${packageVersion} with npm`,
+      );
+      try {
+        // try first without ignoring scripts in case they are required
+        // this works in 99.99% of cases
+        spawnSafe_1.spawnSafeSync(`npm`, ["i", "--force"], {
+          cwd: tmpRepoNpmRoot,
+          logStdErrOnError: false,
+          stdio: "ignore",
+        });
+      } catch (e) {
+        // try again while ignoring scripts in case the script depends on
+        // an implicit context which we haven't reproduced
+        spawnSafe_1.spawnSafeSync(`npm`, ["i", "--ignore-scripts", "--force"], {
+          cwd: tmpRepoNpmRoot,
+          stdio: "ignore",
+        });
+      }
     }
-    if (createIssue && isRebasing) {
-        console_1.default.log("--create-issue is not compatible with rebasing.");
+    const git = (...args) =>
+      spawnSafe_1.spawnSafeSync("git", args, {
+        cwd: tmpRepo.name,
+        env: Object.assign(Object.assign({}, process.env), {
+          HOME: tmpRepo.name,
+        }),
+        maxBuffer: 1024 * 1024 * 100,
+      });
+    // remove nested node_modules just to be safe
+    rimraf_1.sync(path_1.join(tmpRepoPackagePath, "node_modules"));
+    // remove .git just to be safe
+    rimraf_1.sync(path_1.join(tmpRepoPackagePath, ".git"));
+    // remove patch-package state file
+    rimraf_1.sync(path_1.join(tmpRepoPackagePath, stateFile_1.STATE_FILE_NAME));
+    // commit the package
+    console_1.default.info(
+      chalk_1.default.grey("•"),
+      "Diffing your files with clean files",
+    );
+    fs_extra_1.writeFileSync(
+      path_1.join(tmpRepo.name, ".gitignore"),
+      "!/node_modules\n\n",
+    );
+    git("init");
+    git("config", "--local", "user.name", "patch-package");
+    git("config", "--local", "user.email", "patch@pack.age");
+    // remove ignored files first
+    filterFiles_1.removeIgnoredFiles(
+      tmpRepoPackagePath,
+      includePaths,
+      excludePaths,
+    );
+    for (const patchDetails of patchesToApplyBeforeDiffing) {
+      if (
+        !applyPatches_1.applyPatch({
+          patchDetails,
+          patchDir,
+          patchFilePath: path_1.join(
+            appPath,
+            patchDir,
+            patchDetails.patchFilename,
+          ),
+          reverse: false,
+          cwd: tmpRepo.name,
+          bestEffort: false,
+        })
+      ) {
+        // TODO: add better error message once --rebase is implemented
+        console_1.default.log(
+          `Failed to apply patch ${patchDetails.patchFilename} to ${packageDetails.pathSpecifier}`,
+        );
         process.exit(1);
+      }
     }
-    const numPatchesAfterCreate = mode.type === "append" || existingPatches.length === 0
-        ? existingPatches.length + 1
-        : existingPatches.length;
-    const vcs = createIssue_1.getPackageVCSDetails(packageDetails);
-    const canCreateIssue = !isRebasing &&
-        createIssue_1.shouldRecommendIssue(vcs) &&
-        numPatchesAfterCreate === 1 &&
-        mode.type !== "append";
-    const appPackageJson = require(path_1.join(appPath, "package.json"));
-    const packagePath = path_1.join(appPath, packageDetails.path);
-    const packageJsonPath = path_1.join(packagePath, "package.json");
-    if (!fs_extra_1.existsSync(packageJsonPath)) {
-        printNoPackageFoundError(packagePathSpecifier, packageJsonPath);
-        process.exit(1);
+    git("add", "-f", packageDetails.path);
+    git("commit", "--allow-empty", "-m", "init");
+    // replace package with user's version
+    rimraf_1.sync(tmpRepoPackagePath);
+    // pnpm installs packages as symlinks, copySync would copy only the symlink
+    fs_extra_1.copySync(
+      fs_extra_1.realpathSync(packagePath),
+      tmpRepoPackagePath,
+    );
+    // remove nested node_modules just to be safe
+    rimraf_1.sync(path_1.join(tmpRepoPackagePath, "node_modules"));
+    // remove .git just to be safe
+    rimraf_1.sync(path_1.join(tmpRepoPackagePath, ".git"));
+    // remove patch-package state file
+    rimraf_1.sync(path_1.join(tmpRepoPackagePath, stateFile_1.STATE_FILE_NAME));
+    // also remove ignored files like before
+    filterFiles_1.removeIgnoredFiles(
+      tmpRepoPackagePath,
+      includePaths,
+      excludePaths,
+    );
+    // stage all files
+    git("add", "-f", packageDetails.path);
+    // get diff of changes
+    const diffResult = git(
+      "diff",
+      "--cached",
+      "--no-color",
+      "--ignore-space-at-eol",
+      "--no-ext-diff",
+      "--src-prefix=a/",
+      "--dst-prefix=b/",
+    );
+    if (diffResult.stdout.length === 0) {
+      console_1.default.log(
+        `⁉️  Not creating patch file for package '${packagePathSpecifier}'`,
+      );
+      console_1.default.log(`⁉️  There don't appear to be any changes.`);
+      if (isRebasing && mode.type === "overwrite_last") {
+        console_1.default.log(
+          "\n💡 To remove a patch file, delete it and then reinstall node_modules from scratch.",
+        );
+      }
+      process.exit(1);
+      return;
     }
-    const tmpRepo = tmp_1.dirSync({ unsafeCleanup: true });
-    const tmpRepoPackagePath = path_1.join(tmpRepo.name, packageDetails.path);
-    const tmpRepoNpmRoot = tmpRepoPackagePath.slice(0, -`/node_modules/${packageDetails.name}`.length);
-    const tmpRepoPackageJsonPath = path_1.join(tmpRepoNpmRoot, "package.json");
     try {
-        const patchesDir = path_1.resolve(path_1.join(appPath, patchDir));
-        console_1.default.info(chalk_1.default.grey("•"), "Creating temporary folder");
-        // make a blank package.json
-        fs_extra_1.mkdirpSync(tmpRepoNpmRoot);
-        fs_extra_1.writeFileSync(tmpRepoPackageJsonPath, JSON.stringify({
-            dependencies: {
-                [packageDetails.name]: getPackageResolution_1.getPackageResolution({
-                    packageDetails,
-                    packageManager,
-                    appPath,
-                }),
-            },
-            resolutions: resolveRelativeFileDependencies_1.resolveRelativeFileDependencies(appPath, appPackageJson.resolutions || {}),
-        }));
-        const packageVersion = getPackageVersion_1.getPackageVersion(path_1.join(path_1.resolve(packageDetails.path), "package.json"));
-        [".npmrc", ".yarnrc", ".yarn"].forEach((rcFile) => {
-            const rcPath = path_1.join(appPath, rcFile);
-            if (fs_extra_1.existsSync(rcPath)) {
-                fs_extra_1.copySync(rcPath, path_1.join(tmpRepo.name, rcFile), { dereference: true });
-            }
-        });
-        if (packageManager === "yarn") {
-            console_1.default.info(chalk_1.default.grey("•"), `Installing ${packageDetails.name}@${packageVersion} with yarn`);
-            try {
-                // try first without ignoring scripts in case they are required
-                // this works in 99.99% of cases
-                spawnSafe_1.spawnSafeSync(`yarn`, ["install", "--ignore-engines"], {
-                    cwd: tmpRepoNpmRoot,
-                    logStdErrOnError: false,
-                });
-            }
-            catch (e) {
-                // try again while ignoring scripts in case the script depends on
-                // an implicit context which we haven't reproduced
-                spawnSafe_1.spawnSafeSync(`yarn`, ["install", "--ignore-engines", "--ignore-scripts"], {
-                    cwd: tmpRepoNpmRoot,
-                });
-            }
-        }
-        else {
-            console_1.default.info(chalk_1.default.grey("•"), `Installing ${packageDetails.name}@${packageVersion} with npm`);
-            try {
-                // try first without ignoring scripts in case they are required
-                // this works in 99.99% of cases
-                spawnSafe_1.spawnSafeSync(`npm`, ["i", "--force"], {
-                    cwd: tmpRepoNpmRoot,
-                    logStdErrOnError: false,
-                    stdio: "ignore",
-                });
-            }
-            catch (e) {
-                // try again while ignoring scripts in case the script depends on
-                // an implicit context which we haven't reproduced
-                spawnSafe_1.spawnSafeSync(`npm`, ["i", "--ignore-scripts", "--force"], {
-                    cwd: tmpRepoNpmRoot,
-                    stdio: "ignore",
-                });
-            }
-        }
-        const git = (...args) => spawnSafe_1.spawnSafeSync("git", args, {
-            cwd: tmpRepo.name,
-            env: Object.assign(Object.assign({}, process.env), { HOME: tmpRepo.name }),
-            maxBuffer: 1024 * 1024 * 100,
-        });
-        // remove nested node_modules just to be safe
-        rimraf_1.sync(path_1.join(tmpRepoPackagePath, "node_modules"));
-        // remove .git just to be safe
-        rimraf_1.sync(path_1.join(tmpRepoPackagePath, ".git"));
-        // remove patch-package state file
-        rimraf_1.sync(path_1.join(tmpRepoPackagePath, stateFile_1.STATE_FILE_NAME));
-        // commit the package
-        console_1.default.info(chalk_1.default.grey("•"), "Diffing your files with clean files");
-        fs_extra_1.writeFileSync(path_1.join(tmpRepo.name, ".gitignore"), "!/node_modules\n\n");
-        git("init");
-        git("config", "--local", "user.name", "patch-package");
-        git("config", "--local", "user.email", "patch@pack.age");
-        // remove ignored files first
-        filterFiles_1.removeIgnoredFiles(tmpRepoPackagePath, includePaths, excludePaths);
-        for (const patchDetails of patchesToApplyBeforeDiffing) {
-            if (!applyPatches_1.applyPatch({
-                patchDetails,
-                patchDir,
-                patchFilePath: path_1.join(appPath, patchDir, patchDetails.patchFilename),
-                reverse: false,
-                cwd: tmpRepo.name,
-                bestEffort: false,
-            })) {
-                // TODO: add better error message once --rebase is implemented
-                console_1.default.log(`Failed to apply patch ${patchDetails.patchFilename} to ${packageDetails.pathSpecifier}`);
-                process.exit(1);
-            }
-        }
-        git("add", "-f", packageDetails.path);
-        git("commit", "--allow-empty", "-m", "init");
-        // replace package with user's version
-        rimraf_1.sync(tmpRepoPackagePath);
-        // pnpm installs packages as symlinks, copySync would copy only the symlink
-        fs_extra_1.copySync(fs_extra_1.realpathSync(packagePath), tmpRepoPackagePath);
-        // remove nested node_modules just to be safe
-        rimraf_1.sync(path_1.join(tmpRepoPackagePath, "node_modules"));
-        // remove .git just to be safe
-        rimraf_1.sync(path_1.join(tmpRepoPackagePath, ".git"));
-        // remove patch-package state file
-        rimraf_1.sync(path_1.join(tmpRepoPackagePath, stateFile_1.STATE_FILE_NAME));
-        // also remove ignored files like before
-        filterFiles_1.removeIgnoredFiles(tmpRepoPackagePath, includePaths, excludePaths);
-        // stage all files
-        git("add", "-f", packageDetails.path);
-        // get diff of changes
-        const diffResult = git("diff", "--cached", "--no-color", "--ignore-space-at-eol", "--no-ext-diff", "--src-prefix=a/", "--dst-prefix=b/");
-        if (diffResult.stdout.length === 0) {
-            console_1.default.log(`⁉️  Not creating patch file for package '${packagePathSpecifier}'`);
-            console_1.default.log(`⁉️  There don't appear to be any changes.`);
-            if (isRebasing && mode.type === "overwrite_last") {
-                console_1.default.log("\n💡 To remove a patch file, delete it and then reinstall node_modules from scratch.");
-            }
-            process.exit(1);
-            return;
-        }
-        try {
-            parse_1.parsePatchFile(diffResult.stdout.toString());
-        }
-        catch (e) {
-            if (e.message.includes("Unexpected file mode string: 120000")) {
-                console_1.default.log(`
+      parse_1.parsePatchFile(diffResult.stdout.toString());
+    } catch (e) {
+      if (e.message.includes("Unexpected file mode string: 120000")) {
+        console_1.default.log(`
 ⛔️ ${chalk_1.default.red.bold("ERROR")}
 
   Your changes involve creating symlinks. patch-package does not yet support
   symlinks.
   
-  ️Please use ${chalk_1.default.bold("--include")} and/or ${chalk_1.default.bold("--exclude")} to narrow the scope of your patch if
+  ️Please use ${chalk_1.default.bold("--include")} and/or ${chalk_1.default.bold(
+    "--exclude",
+  )} to narrow the scope of your patch if
   this was unintentional.
 `);
-            }
-            else {
-                const outPath = "./patch-package-error.json.gz";
-                fs_extra_1.writeFileSync(outPath, zlib_1.gzipSync(JSON.stringify({
-                    error: { message: e.message, stack: e.stack },
-                    patch: diffResult.stdout.toString(),
-                })));
-                console_1.default.log(`
+      } else {
+        const outPath = "./patch-package-error.json.gz";
+        fs_extra_1.writeFileSync(
+          outPath,
+          zlib_1.gzipSync(
+            JSON.stringify({
+              error: { message: e.message, stack: e.stack },
+              patch: diffResult.stdout.toString(),
+            }),
+          ),
+        );
+        console_1.default.log(`
 ⛔️ ${chalk_1.default.red.bold("ERROR")}
         
   patch-package was unable to read the patch-file made by git. This should not
@@ -252,166 +347,218 @@ function makePatch({ packagePathSpecifier, appPath, packageManager, includePaths
   attempting to patch.
 
 `);
-            }
-            process.exit(1);
-            return;
-        }
-        // maybe delete existing
-        if (mode.type === "append" && !isRebasing && existingPatches.length === 1) {
-            // if we are appending to an existing patch that doesn't have a sequence number let's rename it
-            const prevPatch = existingPatches[0];
-            if (prevPatch.sequenceNumber === undefined) {
-                const newFileName = createPatchFileName({
-                    packageDetails,
-                    packageVersion,
-                    sequenceNumber: 1,
-                    sequenceName: (_b = prevPatch.sequenceName) !== null && _b !== void 0 ? _b : "initial",
-                });
-                const oldPath = path_1.join(appPath, patchDir, prevPatch.patchFilename);
-                const newPath = path_1.join(appPath, patchDir, newFileName);
-                fs_1.renameSync(oldPath, newPath);
-                prevPatch.sequenceNumber = 1;
-                prevPatch.patchFilename = newFileName;
-                prevPatch.sequenceName = (_c = prevPatch.sequenceName) !== null && _c !== void 0 ? _c : "initial";
-            }
-        }
-        const lastPatch = existingPatches[state ? state.patches.length - 1 : existingPatches.length - 1];
-        const sequenceName = mode.type === "append" ? mode.name : lastPatch === null || lastPatch === void 0 ? void 0 : lastPatch.sequenceName;
-        const sequenceNumber = mode.type === "append"
-            ? ((_d = lastPatch === null || lastPatch === void 0 ? void 0 : lastPatch.sequenceNumber) !== null && _d !== void 0 ? _d : 0) + 1
-            : lastPatch === null || lastPatch === void 0 ? void 0 : lastPatch.sequenceNumber;
-        const patchFileName = createPatchFileName({
+      }
+      process.exit(1);
+      return;
+    }
+    // maybe delete existing
+    if (mode.type === "append" && !isRebasing && existingPatches.length === 1) {
+      // if we are appending to an existing patch that doesn't have a sequence number let's rename it
+      const prevPatch = existingPatches[0];
+      if (prevPatch.sequenceNumber === undefined) {
+        const newFileName = createPatchFileName({
+          packageDetails,
+          packageVersion,
+          sequenceNumber: 1,
+          sequenceName:
+            (_b = prevPatch.sequenceName) !== null && _b !== void 0
+              ? _b
+              : "initial",
+        });
+        const oldPath = path_1.join(appPath, patchDir, prevPatch.patchFilename);
+        const newPath = path_1.join(appPath, patchDir, newFileName);
+        fs_1.renameSync(oldPath, newPath);
+        prevPatch.sequenceNumber = 1;
+        prevPatch.patchFilename = newFileName;
+        prevPatch.sequenceName =
+          (_c = prevPatch.sequenceName) !== null && _c !== void 0
+            ? _c
+            : "initial";
+      }
+    }
+    const lastPatch =
+      existingPatches[
+        state ? state.patches.length - 1 : existingPatches.length - 1
+      ];
+    const sequenceName =
+      mode.type === "append"
+        ? mode.name
+        : lastPatch === null || lastPatch === void 0
+          ? void 0
+          : lastPatch.sequenceName;
+    const sequenceNumber =
+      mode.type === "append"
+        ? ((_d =
+            lastPatch === null || lastPatch === void 0
+              ? void 0
+              : lastPatch.sequenceNumber) !== null && _d !== void 0
+            ? _d
+            : 0) + 1
+        : lastPatch === null || lastPatch === void 0
+          ? void 0
+          : lastPatch.sequenceNumber;
+    const patchFileName = createPatchFileName({
+      packageDetails,
+      packageVersion,
+      sequenceName,
+      sequenceNumber,
+    });
+    const patchPath = path_1.join(patchesDir, patchFileName);
+    if (!fs_extra_1.existsSync(path_1.dirname(patchPath))) {
+      // scoped package
+      fs_extra_1.mkdirSync(path_1.dirname(patchPath));
+    }
+    // if we are inserting a new patch into a sequence we most likely need to update the sequence numbers
+    if (isRebasing && mode.type === "append") {
+      const patchesToNudge = existingPatches.slice(state.patches.length);
+      if (sequenceNumber === undefined) {
+        throw new Error("sequenceNumber is undefined while rebasing");
+      }
+      if (
+        ((_e = patchesToNudge[0]) === null || _e === void 0
+          ? void 0
+          : _e.sequenceNumber) !== undefined &&
+        patchesToNudge[0].sequenceNumber <= sequenceNumber
+      ) {
+        let next = sequenceNumber + 1;
+        for (const p of patchesToNudge) {
+          const newName = createPatchFileName({
             packageDetails,
             packageVersion,
-            sequenceName,
-            sequenceNumber,
-        });
-        const patchPath = path_1.join(patchesDir, patchFileName);
-        if (!fs_extra_1.existsSync(path_1.dirname(patchPath))) {
-            // scoped package
-            fs_extra_1.mkdirSync(path_1.dirname(patchPath));
-        }
-        // if we are inserting a new patch into a sequence we most likely need to update the sequence numbers
-        if (isRebasing && mode.type === "append") {
-            const patchesToNudge = existingPatches.slice(state.patches.length);
-            if (sequenceNumber === undefined) {
-                throw new Error("sequenceNumber is undefined while rebasing");
-            }
-            if (((_e = patchesToNudge[0]) === null || _e === void 0 ? void 0 : _e.sequenceNumber) !== undefined &&
-                patchesToNudge[0].sequenceNumber <= sequenceNumber) {
-                let next = sequenceNumber + 1;
-                for (const p of patchesToNudge) {
-                    const newName = createPatchFileName({
-                        packageDetails,
-                        packageVersion,
-                        sequenceName: p.sequenceName,
-                        sequenceNumber: next++,
-                    });
-                    console_1.default.log("Renaming", chalk_1.default.bold(p.patchFilename), "to", chalk_1.default.bold(newName));
-                    const oldPath = path_1.join(appPath, patchDir, p.patchFilename);
-                    const newPath = path_1.join(appPath, patchDir, newName);
-                    fs_1.renameSync(oldPath, newPath);
-                }
-            }
+            sequenceName: p.sequenceName,
+            sequenceNumber: next++,
+          });
+          console_1.default.log(
+            "Renaming",
+            chalk_1.default.bold(p.patchFilename),
+            "to",
+            chalk_1.default.bold(newName),
+          );
+          const oldPath = path_1.join(appPath, patchDir, p.patchFilename);
+          const newPath = path_1.join(appPath, patchDir, newName);
+          fs_1.renameSync(oldPath, newPath);
         }
-        fs_extra_1.writeFileSync(patchPath, diffResult.stdout);
-        console_1.default.log(`${chalk_1.default.green("✔")} Created file ${path_1.join(patchDir, patchFileName)}\n`);
-        const prevState = patchesToApplyBeforeDiffing.map((p) => ({
-            patchFilename: p.patchFilename,
-            didApply: true,
-            patchContentHash: hash_1.hashFile(path_1.join(appPath, patchDir, p.patchFilename)),
-        }));
-        const nextState = [
-            ...prevState,
-            {
-                patchFilename: patchFileName,
-                didApply: true,
-                patchContentHash: hash_1.hashFile(patchPath),
-            },
-        ];
-        // if any patches come after this one we just made, we should reapply them
-        let didFailWhileFinishingRebase = false;
-        if (isRebasing) {
-            const currentPatches = patchFs_1.getGroupedPatches(path_1.join(appPath, patchDir))
-                .pathSpecifierToPatchFiles[packageDetails.pathSpecifier];
-            const previouslyUnappliedPatches = currentPatches.slice(nextState.length);
-            if (previouslyUnappliedPatches.length) {
-                console_1.default.log(`Fast forwarding...`);
-                for (const patch of previouslyUnappliedPatches) {
-                    const patchFilePath = path_1.join(appPath, patchDir, patch.patchFilename);
-                    if (!applyPatches_1.applyPatch({
-                        patchDetails: patch,
-                        patchDir,
-                        patchFilePath,
-                        reverse: false,
-                        cwd: process.cwd(),
-                        bestEffort: false,
-                    })) {
-                        didFailWhileFinishingRebase = true;
-                        logPatchSequenceError({ patchDetails: patch });
-                        nextState.push({
-                            patchFilename: patch.patchFilename,
-                            didApply: false,
-                            patchContentHash: hash_1.hashFile(patchFilePath),
-                        });
-                        break;
-                    }
-                    else {
-                        console_1.default.log(`  ${chalk_1.default.green("✔")} ${patch.patchFilename}`);
-                        nextState.push({
-                            patchFilename: patch.patchFilename,
-                            didApply: true,
-                            patchContentHash: hash_1.hashFile(patchFilePath),
-                        });
-                    }
-                }
-            }
-        }
-        if (isRebasing || numPatchesAfterCreate > 1) {
-            stateFile_1.savePatchApplicationState({
-                packageDetails,
-                patches: nextState,
-                isRebasing: didFailWhileFinishingRebase,
+      }
+    }
+    fs_extra_1.writeFileSync(patchPath, diffResult.stdout);
+    console_1.default.log(
+      `${chalk_1.default.green("✔")} Created file ${path_1.join(
+        patchDir,
+        patchFileName,
+      )}\n`,
+    );
+    const prevState = patchesToApplyBeforeDiffing.map((p) => ({
+      patchFilename: p.patchFilename,
+      didApply: true,
+      patchContentHash: hash_1.hashFile(
+        path_1.join(appPath, patchDir, p.patchFilename),
+      ),
+    }));
+    const nextState = [
+      ...prevState,
+      {
+        patchFilename: patchFileName,
+        didApply: true,
+        patchContentHash: hash_1.hashFile(patchPath),
+      },
+    ];
+    // if any patches come after this one we just made, we should reapply them
+    let didFailWhileFinishingRebase = false;
+    if (isRebasing) {
+      const currentPatches = patchFs_1.getGroupedPatches(
+        path_1.join(appPath, patchDir),
+      ).pathSpecifierToPatchFiles[packageDetails.pathSpecifier];
+      const previouslyUnappliedPatches = currentPatches.slice(nextState.length);
+      if (previouslyUnappliedPatches.length) {
+        console_1.default.log(`Fast forwarding...`);
+        for (const patch of previouslyUnappliedPatches) {
+          const patchFilePath = path_1.join(
+            appPath,
+            patchDir,
+            patch.patchFilename,
+          );
+          if (
+            !applyPatches_1.applyPatch({
+              patchDetails: patch,
+              patchDir,
+              patchFilePath,
+              reverse: false,
+              cwd: process.cwd(),
+              bestEffort: false,
+            })
+          ) {
+            didFailWhileFinishingRebase = true;
+            logPatchSequenceError({ patchDetails: patch });
+            nextState.push({
+              patchFilename: patch.patchFilename,
+              didApply: false,
+              patchContentHash: hash_1.hashFile(patchFilePath),
             });
+            break;
+          } else {
+            console_1.default.log(
+              `  ${chalk_1.default.green("✔")} ${patch.patchFilename}`,
+            );
+            nextState.push({
+              patchFilename: patch.patchFilename,
+              didApply: true,
+              patchContentHash: hash_1.hashFile(patchFilePath),
+            });
+          }
         }
-        else {
-            stateFile_1.clearPatchApplicationState(packageDetails);
-        }
-        if (canCreateIssue) {
-            if (createIssue) {
-                createIssue_1.openIssueCreationLink({
-                    packageDetails,
-                    patchFileContents: diffResult.stdout.toString(),
-                    packageVersion,
-                });
-            }
-            else {
-                createIssue_1.maybePrintIssueCreationPrompt(vcs, packageDetails, packageManager);
-            }
-        }
+      }
     }
-    catch (e) {
-        console_1.default.log(e);
-        throw e;
+    if (isRebasing || numPatchesAfterCreate > 1) {
+      stateFile_1.savePatchApplicationState({
+        packageDetails,
+        patches: nextState,
+        isRebasing: didFailWhileFinishingRebase,
+      });
+    } else {
+      stateFile_1.clearPatchApplicationState(packageDetails);
     }
-    finally {
-        tmpRepo.removeCallback();
+    if (canCreateIssue) {
+      if (createIssue) {
+        createIssue_1.openIssueCreationLink({
+          packageDetails,
+          patchFileContents: diffResult.stdout.toString(),
+          packageVersion,
+        });
+      } else {
+        createIssue_1.maybePrintIssueCreationPrompt(
+          vcs,
+          packageDetails,
+          packageManager,
+        );
+      }
     }
+  } catch (e) {
+    console_1.default.log(e);
+    throw e;
+  } finally {
+    tmpRepo.removeCallback();
+  }
 }
 exports.makePatch = makePatch;
-function createPatchFileName({ packageDetails, packageVersion, sequenceNumber, sequenceName, }) {
-    const packageNames = packageDetails.packageNames
-        .map((name) => name.replace(/\//g, "+"))
-        .join("++");
-    const nameAndVersion = `${packageNames}+${packageVersion}`;
-    const num = sequenceNumber === undefined
-        ? ""
-        : `+${sequenceNumber.toString().padStart(3, "0")}`;
-    const name = !sequenceName ? "" : `+${sequenceName}`;
-    return `${nameAndVersion}${num}${name}.patch`;
+function createPatchFileName({
+  packageDetails,
+  packageVersion,
+  sequenceNumber,
+  sequenceName,
+}) {
+  const packageNames = packageDetails.packageNames
+    .map((name) => name.replace(/\//g, "+"))
+    .join("++");
+  const nameAndVersion = `${packageNames}+${packageVersion}`;
+  const num =
+    sequenceNumber === undefined
+      ? ""
+      : `+${sequenceNumber.toString().padStart(3, "0")}`;
+  const name = !sequenceName ? "" : `+${sequenceName}`;
+  return `${nameAndVersion}${num}${name}.patch`;
 }
-function logPatchSequenceError({ patchDetails, }) {
-    console_1.default.log(`
+function logPatchSequenceError({ patchDetails }) {
+  console_1.default.log(`
 ${chalk_1.default.red.bold("⛔ ERROR")}
 
 Failed to apply patch file ${chalk_1.default.bold(patchDetails.patchFilename)}.
